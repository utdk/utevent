<?php

/**
 * @file
 * Contains Event block type .module file.
 */

use Drupal\block_content\BlockContentInterface;
use Drupal\utevent_block_type_event_listing\EventListingHelper;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function utevent_block_type_event_listing_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Add a template suggestion for the utevent_event_listing bundle.
  if (isset($variables['elements']['content']['#block_content'])) {
    $theme_hook_original = $variables['theme_hook_original'];
    $base_plugin_id = $variables['elements']['#base_plugin_id'];
    $bundle = $variables['elements']['content']['#block_content']->bundle();
    // Theme suggestions for custom inline blocks are already correctly added by
    // core, so we do not want to add another one here.
    if ($bundle === 'utevent_event_listing' && $base_plugin_id !== 'inline_block') {
      // Add a bundle-specific theme suggestion.
      array_splice($suggestions, 1, 0, $theme_hook_original . '__' . $base_plugin_id . '__' . $bundle);
    }
  }
}

/**
 * Implements hook_theme().
 */
function utevent_block_type_event_listing_theme($existing, $type, $theme, $path) {
  // Register the templates defined in /templates.
  return [
    'block__block_content__utevent_event_listing' => [
      'base hook' => 'block',
    ],
    'block__inline_block__utevent_event_listing' => [
      'base hook' => 'block',
    ],
  ];
}

/**
 * Implements hook_preprocess_block().
 */
function utevent_block_type_event_listing_preprocess_block(&$variables) {
  // Add a rendered View of the event listings matching criteria specified
  // from the block's fields.
  $content = $variables['elements']['content'];
  if (isset($content['#block_content']) && $content['#block_content'] instanceof BlockContentInterface) {
    if ($content['#block_content']->bundle() === 'utevent_event_listing') {
      $variables['cta'] = EventListingHelper::generateCta($content['#block_content']);

      if ($listing = EventListingHelper::buildContextualView($content['#block_content'])) {
        $variables['listing'] = $listing;
        $variables['#attached']['library'][] = 'utevent_block_type_event_listing/utevent-listing-block';
      }
    }
  }
}

/**
 * Implements template_preprocess_views_view_field().
 */
function utevent_block_type_event_listing_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  if ($view->id() == 'utevent_listing_block') {
    // Do not display datetime narrative for non-recurring events.
    if ($variables['field']->field == 'field_utevent_datetime' && $variables['field']->options['id'] === 'field_utevent_datetime_1') {
      $date_object = $variables['field']->getItems($variables['row']);
      $date_values = $date_object[0]['raw']->getValue();
      if ($date_values['rrule'] === NULL) {
        unset($variables['output']);
      }
      else {
        $variables['output'] = strip_tags($variables['output']);
      }
    }
  }
}

/**
 * Implements hook_plugin_filter_TYPE__CONSUMER_alter().
 */
function utevent_block_type_event_listing_plugin_filter_block__layout_builder_alter(array &$definitions) {
  // The Event Listing view block is not intended to be placed on its own,
  // but rather via the Event listing block type.
  unset($definitions['views_block:utevent_listing_block-block_1']);
}

<?php

/**
 * @file
 * Contains utevent content type .module file.
 */

use Drupal\utevent_content_type_event\EventContentTypeHelper;

/**
 * Contains utevent Event content type .module file.
 */

/**
 * Implements hook_theme().
 */
function utevent_content_type_event_theme() {
  return [
    'node__utevent_event' => [
      'template' => 'node--utevent-event',
      'base hook' => 'node',
    ],
    'node__utevent_event__full' => [
      'template' => 'node--utevent-event--full',
      'base hook' => 'node',
    ],
    'node__utevent_event__teaser' => [
      'template' => 'node--utevent-event--teaser',
      'base hook' => 'node',
    ],
    'field__node__utevent_event' => [
      'template' => 'field--node--utevent-event',
      'base hook' => 'field',
    ],
    'field__node__field_utevent_main_media' => [
      'template' => 'field--node--field-utevent-main-media',
      'base hook' => 'field',
    ],
    'field__node__field_utevent_status' => [
      'template' => 'field--node--field-utevent-status',
      'base hook' => 'field',
    ],
    'field__node__field_utevent_body' => [
      'template' => 'field--node--field-utevent-body',
      'base hook' => 'field',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function utevent_content_type_event_theme_suggestions_field(array $variables) {

  $suggestions = [];

  $element = $variables['element'];

  $field_name = $element['#field_name'];
  $view_mode = $element['#view_mode'];
  $entity_type = $element['#entity_type'];
  $bundle = $element['#bundle'];

  $suggestions[] = 'field__' . $field_name . '__' . $view_mode;
  $suggestions[] = 'field__' . $entity_type . '__' . $field_name . '__' . $view_mode;
  $suggestions[] = 'field__' . $entity_type . '__' . $bundle . '__' . $field_name . '__' . $view_mode;

  return $suggestions;
}

/**
 * Helper function to add the "Standard workflow" to the content type.
 */
function _utevent_content_type_event_add_standard_workflow() {
  $config_id = 'workflows.workflow.standard_workflow';
  $config = \Drupal::service('config.factory')->getEditable($config_id);
  if (is_null($config->get('id'))) {
    \Drupal::logger('utevent_content_type_event')->notice('Standard workflow not found. Skipping...');
    // This site does not use the standard_workflow from utdk_profile. Move on.
    return;
  }
  \Drupal::logger('utevent_content_type_event')->notice('Standard workflow found. Updating...');
  $type_settings = $config->get('type_settings');
  $new_type_settings = $type_settings;
  $new_type_settings['entity_types']['node'][] = 'utevent_event';
  $config->set('type_settings', $new_type_settings);
  $config->save();
  // A cache rebuild is required for this configuration change to show.
  drupal_flush_all_caches();
}

/**
 * Implements hook_preprocess_node().
 */
function utevent_content_type_event_preprocess_node(&$variables) {
  $node = $variables['elements']['#node'];
  $type = $node->getType();

  // If the event is cancelled, hide the "Add to calendar" functionality (#347).
  if ($type === 'utevent_event') {
    if ($node->hasField('field_utevent_status')) {
      $utevent_status = $node->get('field_utevent_status')->getString();
      if ($utevent_status === 'EventCancelled') {
        $variables['canceled'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function utevent_content_type_event_preprocess_field(&$variables, $hook) {
  // Convert taxonomy terms to link to `/events?<term>.
  if (\Drupal::moduleHandler()->moduleExists('utevent_view_listing_page') !== FALSE) {
    switch ($variables['element']['#field_name']) {
      case 'field_utevent_location':
        foreach ($variables['items'] as &$item) {
          if (isset($item['content']['#entity'])) {
            unset($item['content']['#plain_text']);
            $item['content']['#markup'] = EventContentTypeHelper::prepareEventTaxonomy($item['content']['#entity'], 'location');
          }
        }
        break;

      case 'field_utevent_tags':
        foreach ($variables['items'] as &$item) {
          if (isset($item['content']['#entity'])) {
            unset($item['content']['#plain_text']);
            $item['content']['#markup'] = EventContentTypeHelper::prepareEventTaxonomy($item['content']['#entity'], 'type');
          }
        }
        break;

      default:
        return;
    }
  }
}

{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 *
 * @see template_preprocess_field()
 */
#}

{#
/**
 * These classes are copied verbatim from the core theme Classy field.html.twig
 * template. Additionally, "field__items" and "field__item" have been preserved
 * in the body of the template according to their implementation in the Classy
 * theme field.html.twig template.
 */
#}
{%
  set classes = [
    'field',
    'field--name-' ~ field_name|clean_class,
    'field--type-' ~ field_type|clean_class,
    'field--label-' ~ label_display,
    label_display == 'inline' ? 'clearfix',
  ]
%}
{%
  set title_classes = [
    'field__label',
    label_display == 'visually_hidden' ? 'visually-hidden',
  ]
%}

{# These classes are part of a BEM implentation used by the utevent module. #}
{% set bem_block = 'utevent-event-field' %}
{% set classes_utevent = [
    bem_block,
    bem_block ~ '--' ~ field_name|clean_class
  ]
%}
{% set title_classes_utevent = [
    bem_block ~ '__label',
    label_display == 'visually_hidden' ? bem_block ~ '__label--visually-hidden',
  ]
%}

{# The "classes" and "title_classes" arrays from the Classy theme and the BEM
  classes used to style the utevent module are merged. #}
{% set classes = classes|merge(classes_utevent) %}
{% set title_classes = title_classes|merge(title_classes_utevent) %}

{# Arrays of additional classes can be added when this template is embedded in a
  child template.#}
{% set classes = classes|merge(classes_additional|default([])) %}
{% set title_classes = title_classes|merge(title_classes_additional|default([])) %}

{% block field_display %}
  {% if label_hidden %}
    {% if multiple %}
      <div{{attributes.addClass(classes,'field__items', bem_block ~ '__items')}}>
        {% block field_items_block %}
          {% for item in items %}
              <div{{item.attributes.addClass('field__item', bem_block ~ '__item')}}>{{ item.content }}</div>
          {% endfor %}
        {% endblock %}
      </div>
    {% else %}
      <div{{attributes.addClass(classes)}}>
        {{ block('field_items_block')}}
      </div>
    {% endif %}
  {% else %}
    <div{{attributes.addClass(classes)}}>
      <div{{title_attributes.addClass(title_classes)}}>{{ label }}</div>
      {% if multiple %}
        <div class="field__items {{bem_block}}__items">
        {% endif %}
          {{ block('field_items_block')}}
        {% if multiple %}
        </div>
      {% endif %}
    </div>
  {% endif %}
{% endblock field_display %}
